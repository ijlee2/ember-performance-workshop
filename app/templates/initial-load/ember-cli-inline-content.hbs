<h2>Inlining critical assets</h2>

<p>
  ember-cli-inline-content allows you to inline the contents of any file into your HTML.
  This allows us to inline critical, above the fold styles, and other small JS and CSS
  snippets we may not want to fire off another request to our server for. It should be already
  installed in the repo, but disabled. If it is not installed, it can be installed by running:
</p>

<h2>Exercise: Inline CSS</h2>

{{#code-block language='bash'}}
  ember install ember-cli-inline-content
{{~/code-block~}}

<p>
  Once installed, we want to inline our critical CSS, so the above the fold content is styled
  without extra requests for CSS.
</p>

{{not-inline-header}}

<p>
  This is a super basic header example that just has text, with a font-size and text-align property set.
  This extremely small CSS payload will not do much to negatively effect the build time, but we will use it
  as an example of how you would inline your styles for this header.
</p>

<p>
  First, I generally create an <code>inline</code> directory, to put all potential inline content into.
  For the purpose of this example, let's create <code>inline/header.css</code>.
  Then we should copy the styles into it.
</p>

{{#code-block language="css"}}
  .not-inline-header h1 {
    font-size: 35px;
    text-align: center;
  }
{{/code-block}}

<p>
  We can then include this file to be inlined in our ember-cli-build.js.
</p>

{{#code-block language="javascript"}}
  // ember-cli-build.js
  inlineContent: {
    header: 'inline/header.css'
  }
{{/code-block}}

Then all we need to do is reference it in index.html.

{{#code-block language="handlebars"}}
  \{{!-- app/index.html --}}
  \{{content-for 'header'}}
{{/code-block}}

<h2>Exercise: Inline Google Analytics</h2>

<p>
  Another thing that typically fires off another request and that cannot have cache headers set on it, is the script
  for Google Analytics. This app has a basic GA setup using ember-metrics, just to show how a typical simple setup would go.
  We can use ember-cli-inline-content to inline galite instead, to both save on file size, allow setting cache headers,
  and eliminate an extra call to get the GA script. We can use galite by copying it directly to <code>inline/ga.js</code>.
</p>

{{#code-block language="javascript"}}
  (function(e,t,n,i,s,a,c){e[n]=e[n]||function(){(e[n].q=e[n].q||[]).push(arguments)}
  ;a=t.createElement(i);c=t.getElementsByTagName(i)[0];a.async=true;a.src=s
  ;c.parentNode.insertBefore(a,c)
  })(window,document,"galite","script","https://cdn.jsdelivr.net/npm/ga-lite@2/dist/ga-lite.min.js");

  galite('create', 'UA-XXXX-Y', 'auto');
  galite('send', 'pageview');
{{/code-block}}

<p>
  Then we just need to add this to our <code>inlineContent</code> config in ember-cli-build.js and
  pull in this inline content in our index.html, just like we did for the CSS above.
  We can conditionally include it, to make sure events do not fire unless we are in production.
</p>

{{#code-block language="javascript"}}
  // ember-cli-build.js
  inlineContent: {
    'google-analytics': {
      file: 'inline/ga.js',
      enabled: process.env.EMBER_ENV === 'production'
    }
  }
{{/code-block}}

{{#code-block language="handlebars"}}
  \{{!-- app/index.html --}}
  \{{content-for 'google-analytics'}}
{{/code-block}}

<p>
  We will also want to remove ember-metrics from package.json and update the <code>_trackPage</code> method in router.js.
</p>

{{#code-block language="javascript"}}
  _trackPage() {
    if (!get(this, 'fastboot.isFastBoot')) {
      run.scheduleOnce('afterRender', this, () => {
        const page = document.location.pathname;
        const title = getWithDefault(this, 'currentRouteName', 'unknown');

        if (typeof galite === 'undefined') {
          return;
        }
        return galite('send', 'pageview', { page, title });
      });
    }
  }
{{/code-block}}